@Library("jenkins-library") _

pipeline {
    agent any
    // *** Documentation ***
    // name: reactivities-iac-ci
    // descrition: 'Continuous Integration (Build) for the Infrastructure-as-Code part of the Reactivities client application.'
    // discardOldBuilds: strategy: Log Rotation, maxBuildsToKeep: 10
    // doNotAllowConcurrentBuilds: true
    // server env vars: ARTIFACTORY_CREDS_ID, ARTIFACTORY_SERVER
    parameters {
        choice(
            name: 'BUILD_ENV',
            choices: ['dev','qa'],
            description: 'Environment for which to build and package the solution.',
        )
        choice(
            name: 'RUN_INITIALIZE',
            choices: ['Yes','No'],
            description: 'Whether to initialize and validate.',
        )
        choice(
            name: 'RUN_SONAR',
            choices: ['No','Yes'],
            description: 'Whether to run SonarQube Scanner and Quality Gate stages.',
        )
        choice(
            name: 'RUN_PACKAGE_ARCHIVE',
            choices: ['Yes','No'],
            description: 'Whether to package the artifact(s).',
        )
    }
    environment {
        CI = 'false' // TODO: set to true, false for now -- else builds fail due to client build warnings
        SONAR_PROJECT_KEY = 'Reactivities-TF'
        SONAR_PROJECT_BASE_PATH = '.'
        SONAR_SERVER_ID = 'SonarQubeScanner'
        BUILDS_PATH = '/builds'
        BUILD_PREFIX = '1.0'
        APPLICATION_NAME = 'Reactivities'
        PACKAGE_NAME = "reactivities-tf-${BUILD_ENV}-${BUILD_PREFIX}.${BUILD_NUMBER}.tar.gz"
        PACKAGE_REPO_PATH = "reactivities/tf/${BUILD_ENV}/${PACKAGE_NAME}"
        PACKAGE_BUILD_PATH = "${BUILDS_PATH}/${PACKAGE_NAME}"
    }
    stages {
        stage('Validate') {
            when {
                expression { RUN_INITIALIZE == "Yes" }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh '''
                    apk update && apk add terraform
                '''
                withCredentials([string(credentialsId: "AWS_ACCESS_KEY_ID_${BUILD_ENV}", variable: 'AWS_ACCESS_KEY_ID')]) {
                    withCredentials([string(credentialsId: "AWS_SECRET_ACCESS_KEY_${BUILD_ENV}", variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh """
                            TF_VAR_deploy_env=${BUILD_ENV} \
                                terraform init -no-color -input=false -compact-warnings && \
                                terraform validate
                        """
                    }
                }
                stash(name: 'sourceartifacts')
            }
        }
        stage('Sonar Scanner') {
            when {
                expression { RUN_INITIALIZE == "Yes" && RUN_SONAR == 'Yes' }
            }
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli'
                }
            }
            steps {
                sonarScan([
                    SONAR_SERVER_ID: "${SONAR_SERVER_ID}",
                    SONAR_PROJECT_BASE_PATH: "${SONAR_PROJECT_BASE_PATH}",
                    SONAR_PROJECT_KEY: "${SONAR_PROJECT_KEY}"
                ])
            }
        }
        stage("Quality Gate") {
            when {
                expression { RUN_INITIALIZE == "Yes" && RUN_SONAR == 'Yes' }
            }
            steps {
                awaitQualityGate()
            }
        }
        stage('Package') {
            when {
                expression { RUN_INITIALIZE == "Yes" && RUN_PACKAGE_ARCHIVE == "Yes" }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh "rm -rf ./artifacts && mkdir ./artifacts"
                dir('./artifacts') {
                    unstash 'sourceartifacts'
                }
                sh '''
                    mkdir -p $BUILDS_PATH
                    cd ./artifacts && tar -czvf $PACKAGE_BUILD_PATH --exclude='.gen' --exclude='.scannerwork' .
                '''
                archiveArtifact([
                    ARTIFACTORY_CREDS_ID: "${ARTIFACTORY_CREDS_ID}",
                    ARTIFACTORY_SERVER: "${ARTIFACTORY_SERVER}",
                    PACKAGE_BUILD_PATH: "${PACKAGE_BUILD_PATH}",
                    PACKAGE_REPO_PATH: "${PACKAGE_REPO_PATH}"
                ])
                cleanDirectory([ DIRECTORY: "${BUILDS_PATH}" ])
                cleanDirectory([ DIRECTORY: "./artifacts" ])
            }
        }
    }
}
