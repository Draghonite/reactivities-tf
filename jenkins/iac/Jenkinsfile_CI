@Library("jenkins-library") _

pipeline {
    agent any
    // *** Documentation ***
    // name: reactivities-iac-ci
    // descrition: 'Continuous Integration (Build) for the Infrastructure-as-Code part of the Reactivities client application.'
    // server env vars: ARTIFACTORY_CREDS_ID, ARTIFACTORY_SERVER
    // credentials: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
    options {
        buildDiscarder(logRotator(numToKeepStr:'5'))
        disableConcurrentBuilds()
    }
    parameters {
        choice(
            name: 'BUILD_ENV',
            choices: ['dev','qa'],
            description: 'Environment for which to build and package the solution.',
        )
        choice(
            name: 'RUN_INITIALIZE',
            choices: ['Yes','No'],
            description: 'Whether to initialize and validate.',
        )
        choice(
            name: 'RUN_SONAR',
            choices: ['Yes','No'],
            description: 'Whether to run SonarQube Scanner and Quality Gate stages.',
        )
        choice(
            name: 'RUN_PACKAGE_ARCHIVE',
            choices: ['Yes','No'],
            description: 'Whether to package the artifact(s).',
        )
        choice(
            name: 'RUN_DEPLOY',
            choices: ['Yes','No'],
            description: 'Whether to trigger the CD pipeline.',
        )
    }
    environment {
        CI = 'false' // TODO: set to true, false for now
        SONAR_PROJECT_KEY = 'Reactivities-TF'
        SONAR_PROJECT_BASE_PATH = '.'
        SONAR_SERVER_ID = 'SonarQubeScanner'
        BUILDS_PATH = '/builds'
        BUILD_PREFIX = '1.0'
        APPLICATION_NAME = 'Reactivities'
        PACKAGE_NAME = "reactivities-tf-${BUILD_ENV}-${BUILD_PREFIX}.${BUILD_NUMBER}.tar.gz"
        PACKAGE_REPO_PATH = "reactivities/tf/${BUILD_ENV}/${PACKAGE_NAME}"
        PACKAGE_BUILD_PATH = "${BUILDS_PATH}/${PACKAGE_NAME}"
        // only uses the string replacement (and runs the job) if using a specific pattern (job names end with "-ci" => "-cd")
        CD_JOB_NAME = "${ JOB_NAME.endsWith('-ci') && JOB_NAME.indexOf('-ci') == JOB_NAME.length() - 3 ? JOB_NAME.replaceAll('-ci', '-cd') : '' }"
    }
    stages {
        stage('Validate') {
            when {
                expression { RUN_INITIALIZE == "Yes" }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                tfValidate([
                    BUILD_ENV: "${BUILD_ENV}"
                ])
            }
        }
        stage('Sonar Scanner') {
            when {
                expression { RUN_INITIALIZE == "Yes" && RUN_SONAR == 'Yes' }
            }
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli'
                }
            }
            steps {
                sonarScan([
                    SONAR_SERVER_ID: "${SONAR_SERVER_ID}",
                    SONAR_PROJECT_BASE_PATH: "${SONAR_PROJECT_BASE_PATH}",
                    SONAR_PROJECT_KEY: "${SONAR_PROJECT_KEY}"
                ])
            }
        }
        stage("Quality Gate") {
            when {
                expression { RUN_INITIALIZE == "Yes" && RUN_SONAR == 'Yes' }
            }
            steps {
                awaitQualityGate()
            }
        }
        stage('Package') {
            when {
                expression { RUN_INITIALIZE == "Yes" && RUN_PACKAGE_ARCHIVE == "Yes" }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh "rm -rf ./artifacts && mkdir ./artifacts"
                dir('./artifacts') {
                    unstash 'sourceartifacts'
                }
                sh """
                    mkdir -p ${BUILDS_PATH}
                    cd ./artifacts && tar -czvf ${PACKAGE_BUILD_PATH} --exclude='.gen' --exclude='.scannerwork' .
                    apk add curl
                """
                archiveArtifact([
                    ARTIFACTORY_CREDS_ID: "${ARTIFACTORY_CREDS_ID}",
                    ARTIFACTORY_SERVER: "${ARTIFACTORY_SERVER}",
                    PACKAGE_BUILD_PATH: "${PACKAGE_BUILD_PATH}",
                    PACKAGE_REPO_PATH: "${PACKAGE_REPO_PATH}"
                ])
                cleanDirectory([ DIRECTORY: "${BUILDS_PATH}" ])
                cleanDirectory([ DIRECTORY: "./artifacts" ])
            }
        }
        stage('Deploy') {
            when {
                expression { CD_JOB_NAME != "" && RUN_INITIALIZE == "Yes" && RUN_PACKAGE_ARCHIVE == "Yes" && RUN_DEPLOY == "Yes" }
            }
            agent any
            steps {
                build job: "${CD_JOB_NAME}", wait: false, parameters: [
                    string(name: 'DEPLOY_ENV', value: "${BUILD_ENV}"),
                    string(name: 'AWS_REGION', value: 'us-east-1'),
                    string(name: 'CI_BUILD_NUMBER', value: "${BUILD_PREFIX}.${BUILD_NUMBER}"),
                    string(name: 'RUN_TYPE', value: 'Create'),
                    string(name: 'RUN_PACKAGE_DOWNLOAD', value: 'Yes'),
                    string(name: 'RUN_PACKAGE_VERIFY', value: 'Yes'),
                    string(name: 'RUN_DEPLOYMENT', value: 'Yes'),
                    string(name: 'DRY_RUN', value: 'No')
                ]
            }
        }
    }
}
